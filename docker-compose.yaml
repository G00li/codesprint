services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    networks:
      - crewai-network
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    environment:
      - BACKEND_URL=http://backend:8000
    depends_on:
      - backend
      - db
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    networks:
      - crewai-network
    ports:
      - "8000:8000"
    env_file: 
      - ./backend/.env
    environment:
      LITELLM_MODEL_URL: http://ollama:11434
      CREWAI_BASE_URL: http://crewai:8004
      DATABASE_URL: postgresql://postgres:postgres@db:5432/codesprint
    volumes:
      - ./backend:/app
    depends_on:
      - crewai
      - redis
      - db
    restart: unless-stopped

  crewai:
    build:
      context: ./crewai
      dockerfile: Dockerfile
    
    ports:
      - "8004:8004"
    networks:
      - crewai-network
    environment:
      - LITELLM_MODEL_NAME=llama2:7b-chat
      - LITELLM_API_BASE=http://ollama:11434
      - LITELLM_API_KEY=dummy
      - LITELLM_PROVIDER=ollama
      
    env_file:
      - ./crewai/.env
    volumes:
      - ./crewai:/app
    depends_on:
      - ollama
    restart: unless-stopped

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ./ollama_data:/root/.ollama
    networks:
      - crewai-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    restart: unless-stopped
    entrypoint: ollama serve

  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: codesprint
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - crewai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  crewai-network:
    driver: bridge

volumes:
  redis_data:
  ollama_data:
  postgres_data: